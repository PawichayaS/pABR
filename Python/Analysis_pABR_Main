import numpy as np
import math
import random
import scipy
import scipy.interpolate as sp
import scipy.io as sio
import mat73
import matplotlib.pyplot as plt
import statistics
from scipy.io import savemat
from plotly.subplots import make_subplots
import hdf5storage
scipy.io

# Inputs:
# voltage   -   the recorded voltage [samps x 1]
# triggers  -   the start sample of each tone [freqs x trials]
# f_samp    -   the sampling rate of the recording
# offset    -   the start time of the averaging window relative to the tone
# dur       -   the duration of the averaging window
# n_noise   -   the number of independent random samples for estimating chance
# raw_flag  -   1 to return median over trials, 0 to return all trials
# plot_flag -   1 to plot results, 0 otherwise

# Outputs:
# signal    -   the average voltage in the window following each tone
# noise     -   the average voltage in random windows

# Note that alternating polarity tones at each frequency are assumed

def Extract_Signal_And_Noise(voltage, triggers, f_samp = 44100, offset = 0.092 , dur = 0.011, n_noise = 32, median_flag = 0, plot_flag = 0): 
    
    offset_samps = int(np.floor(offset * f_samp)) 
    avg_samps = int(np.floor(dur * f_samp))
    trial_samps = voltage.shape[0] 
    n_freqs, n_tones = triggers.shape 

    signal = np.full((avg_samps + 1, n_freqs, n_tones), np.nan) 
    noise = np.full((avg_samps + 1, n_noise, n_tones), np.nan)
   
    # Grab the voltage in the window following each trigger
    for i_freq in range(n_freqs): 
        for i_tone in range(n_tones):  
            rng = np.arange(triggers[i_freq, i_tone] + offset_samps, triggers[i_freq, i_tone] + offset_samps + avg_samps + 1) 
            
            if rng[-1] < trial_samps: # If too close to beginning or end to grab a full waveform, then skip
                signal[:, i_freq, i_tone] = voltage[rng,0]

    # Grab the voltage in random windows
    for i_noise in range(n_noise): 
        for i_tone in range(n_tones):
            temp = np.random.randint(trial_samps) 
            rng = np.arange(temp + offset_samps, temp + offset_samps + avg_samps + 1) 
            
            while rng[0] < 0 or rng[-1] >= trial_samps: #If too close to beginning or end to grab a full waveform, try again
                temp = np.random.randint(trial_samps)    
                rng = np.arange(temp + offset_samps, temp + offset_samps + avg_samps +1)
            
            noise[:, i_noise, i_tone] = voltage[rng,0]
            continue

    if median_flag: 
        signal = np.nanmedian(signal, axis=2)    
        noise = np.nanmedian(noise, axis=2)

    if plot_flag: 
        plt.figure()
        dt = 1 / f_samp

        if median_flag:
            y_max = np.max(np.abs(signal[:])) 
        else:
            temp = np.median(signal,axis = 2)
            y_max = np.max(np.abs(temp[:]))
            
        t = np.arange(dt, (avg_samps + 1) * dt, dt)  
        
        for i_freq in range(n_freqs): 
            plt.subplot(1, n_freqs , i_freq + 1)

            if median_flag:
                plt.plot(1000 * t, noise, 'k')
                plt.plot(1000 * t, signal[:, i_freq], 'r')

            else:
                plt.plot(1000 * t, np.median(noise, axis = 1),'k')
                plt.plot(1000 * t, np.median(signal[:,i_freq,:],axis = 1),'r')

        plt.xlabel('Time (ms)')
        plt.ylim([-y_max, y_max])
        plt.gca().set_Ylim([-y_max, y_max])
        plt.show()

return signal, noise










## load Example_Signal_And_Noise.Mat ##

Example_Signal_And_Noise = hdf5storage.loadmat('Example_Signal_And_Noise.mat')

signal = Example_Signal_And_Noise["Signal"]
noise = Example_Signal_And_Noise["Noise"] 

# call function of Analyze_Signal_And_Noise

tot_var,noise_var,log_tot_var,mean_log_noise_var,std_log_noise_var,snr_std = Analyze_Signal_And_Noise(signal, noise) 

variables_data = {
    'tot_var': tot_var,
    'noise_var': noise_var,
    'log_tot_var': log_tot_var,
    'mean_log_noise_var': mean_log_noise_var,
    'std_log_noise_var': std_log_noise_var,
    'snr_std': snr_std
    }

savemat('Example_Signal_And_Noise_Analysis.mat', variables_data)


## Analyze signal and noise and estimate threshold ##

levels = np.arange(0, 101, 10)  #Sound levels in dB SPL for each recording
freqs = np.array([1, 2, 4, 8, 16]) #pABR tone frequencies

std_thresh = 4.264  #Corresponding to p < 1e-5

# Interpolate to 1 dB resolution
interp_func = sp.interp1d(levels, snr_std, axis=1)
temp = interp_func(np.arange(levels[0], levels[-1] + 1))

# Plot figure
thresh = []

plt.figure(figsize=(20, 8))
for i_freq, freq in enumerate(freqs):
    thresh_level = np.argmax(temp[:, i_freq] > std_thresh) + levels[0]
    thresh.append(thresh_level)

    plt.subplot(1, len(freqs), i_freq + 1)
    plt.plot(levels, snr_std[i_freq, :], label='SNR Std')
    plt.axhline(y=std_thresh, color='r', linestyle='--', label='Threshold')
    plt.axvline(x=thresh_level, color='g', linestyle='--', label='Threshold Level')
    plt.plot(thresh_level, 0, 'o', label=f'Threshold @ {thresh_level} dB')
    plt.ylim([-2, 22])
    plt.xlabel('Sound Level (dB SPL)')
    plt.ylabel('Amplitude')
    plt.title(f'Frequency: {freq} kHz')
    plt.legend()

plt.suptitle('ABR amplitude expressed as standard deviations above amplitude expected by chance')
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()



    



